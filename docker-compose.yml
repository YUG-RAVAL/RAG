services:
  web:
    build: .
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/app/uploads
      - ./chroma_db:/app/chroma_db
      - ./sonu_resources:/app/sonu_resources
      - ./.env:/app/.env
          
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    env_file:
      - ./.env
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - redis
      - postgres
    command: >
      bash -c "
        echo 'Starting application...' &&
        echo 'OPENAI_API_KEY status: available (masked for security)' &&
        echo 'FLASK_APP: ${FLASK_APP}' &&
        echo 'FLASK_ENV: ${FLASK_ENV}' &&
        echo 'FLASK_DEBUG: ${FLASK_DEBUG}' &&
        echo 'PYTHONUNBUFFERED: ${PYTHONUNBUFFERED}' &&
        echo 'Waiting for PostgreSQL to start...' &&
        sleep 5 &&
        gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:8080 --log-level debug --timeout 120 --error-logfile - --access-logfile - --capture-output run:app
      "

  redis:
    image: redis:7-alpine
#    ports:
#      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    hostname: redis
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  postgres:
    image: postgres:16-alpine
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
